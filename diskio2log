#!/usr/bin/env python3
"""
diskio2log - Monitor and log some current I/O metrics for selected block device
"""

from argparse import ArgumentParser
from ctypes import CDLL
from signal import SIGHUP, SIGINT, SIGQUIT, SIGTERM, signal
from sys import exit
from time import monotonic, sleep


def log(msg):
    """
    """
    print(msg)
    if separate_log:
        logging.info(msg)


def mlockall():
    """
    """
    MCL_CURRENT = 1
    MCL_FUTURE = 2
    MCL_ONFAULT = 4

    libc = CDLL(None, use_errno=True)
    result = libc.mlockall(MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT)

    if result != 0:
        result = libc.mlockall(MCL_CURRENT | MCL_FUTURE)
        if result != 0:
            log('WARNING: cannot lock process memory: [Errno {}]'.format(
                result))
        else:
            log('Process memory locked with MCL_CURRENT | MCL_FUTURE')
    else:
        log('Process memory locked with MCL_CURRENT | MCL_FUTURE | MCL_'
            'ONFAULT')


def check_stats():
    """
    """
    with open(DISKSTATS, 'rb', buffering=0) as f:
        dev_line = f.read().decode().split('\n')

    dev_ok = False
    for i in dev_line:
        if DEV_SEPARATOR in i:
            _, _, a = i.rpartition(DEV_SEPARATOR)
            dev_ok = True

    if not dev_ok:
        log('device not found')
        exit(1)

    (r_ios, _, r_sectors, r_ticks, w_ios, _, w_sectors, w_ticks, in_flights
     ) = a.split()[:9]

    r_ios = int(r_ios)
    r_mib = int(r_sectors) * SECT_MULT
    r_wait = int(r_ticks) / T
    w_ios = int(w_ios)
    w_mib = int(w_sectors) * SECT_MULT
    w_wait = int(w_ticks) / T

    return r_ios, r_mib, r_wait, w_ios, w_mib, w_wait, in_flights


def signal_handler(signum, frame):
    """
    """
    def signal_handler_inner(signum, frame):
        pass

    for i in sig_list:
        signal(i, signal_handler_inner)

    log('--')

    r_ios, r_mib, r_wait, w_ios, w_mib, w_wait, in_flights = check_stats()

    d_r_ios = r_ios - r_ios0
    d_r_mib = r_mib - r_mib0
    d_r_wait = r_wait - r_wait0
    d_w_ios = w_ios - w_ios0
    d_w_mib = w_mib - w_mib0
    d_w_wait = w_wait - w_wait0

    d_t = monotonic() - t0

    log('In the last {}s:'.format(round(d_t, 1)))

    log('R: {}MiB, {} requests, await {}s (avg {}M/s, {}r/s, {}%)'.format(
        round(d_r_mib, 1),
        d_r_ios,
        round(d_r_wait, 1),
        round(d_r_mib / d_t, 1),
        round(d_r_ios / d_t, 1),
        round(d_r_wait / d_t * 100, 1)
    ))

    log('W: {}MiB, {} requests, await {}s (avg {}M/s, {}r/s, {}%)'.format(
        round(d_w_mib, 1),
        d_w_ios,
        round(d_w_wait, 1),
        round(d_w_mib / d_t, 1),
        round(d_w_ios / d_t, 1),
        round(d_w_wait / d_t * 100, 1)
    ))

    exit()


def monitor(r_ios_old, r_mib_old, r_wait_old,
            w_ios_old, w_mib_old, w_wait_old, t):
    """
    """
    sleep(interval)

    while True:
        r_ios, r_mib, r_wait, w_ios, w_mib, w_wait, in_flights = check_stats()

        d_r_ios = r_ios - r_ios_old
        d_r_mib = r_mib - r_mib_old
        d_r_wait = r_wait - r_wait_old
        d_w_ios = w_ios - w_ios_old
        d_w_mib = w_mib - w_mib_old
        d_w_wait = w_wait - w_wait_old

        d_t = monotonic() - t

        (r_ios_old, r_mib_old, r_wait_old, w_ios_old, w_mib_old, w_wait_old
         ) = r_ios, r_mib, r_wait, w_ios, w_mib, w_wait

        t = monotonic()

        log('R {}M/s, {}r/s, await {}% | '
            'W {}M/s, {}r/s, await {}% | in_fl {}r'.format(
                round(d_r_mib / d_t, 1),
                round(d_r_ios / d_t),
                round(d_r_wait / d_t * 100),
                round(d_w_mib / d_t, 1),
                round(d_w_ios / d_t),
                round(d_w_wait / d_t * 100),
                in_flights
            ))

        sleep(interval)


parser = ArgumentParser()

parser.add_argument(
    '-i',
    '--interval',
    help='interval in sec',
    default=2,
    type=float
)

parser.add_argument(
    '-l',
    '--log',
    help='path to log file',
    default=None,
    type=str
)

parser.add_argument(
    '-d',
    '--dev',
    help='device name',
    default='',
    type=str
)

args = parser.parse_args()
interval = args.interval
log_file = args.log
dev = args.dev


if log_file is None:
    separate_log = False
else:
    separate_log = True
    import logging

if log_file is not None:
    logstring = 'log file: {}, '.format(log_file)
else:
    logstring = 'log file is not set, '

if separate_log:
    try:
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format="%(asctime)s: %(message)s")
    except Exception as e:
        print(e)
        exit(1)

if dev == '':
    log('set correct device name with -d option')
    exit(1)

if dev.isdigit():
    log('invalid device name')
    exit(1)

if interval <= 0:
    log('error: argument -i/--interval: the value must be greater than 0')
    exit(1)


DISKSTATS = '/proc/diskstats'

DEV_SEPARATOR = ' ' + dev + ' '

K = 1024

T = 1000

SECT_MULT = 512 / K / K


sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

for i in sig_list:
    signal(i, signal_handler)


log('Starting diskio2log, block device: {}, interval: {}s'.format(
    dev, interval))

if log_file is not None:
    log('Log file: {}'.format(log_file))

mlockall()

log('--')

r_ios0, r_mib0, r_wait0, w_ios0, w_mib0, w_wait0, _ = check_stats()

t0 = monotonic()

monitor(r_ios0, r_mib0, r_wait0, w_ios0, w_mib0, w_wait0, t0)
