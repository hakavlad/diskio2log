#!/usr/bin/env python3
"""
diskio2log - Monitor and log some current I/O metrics for selected block device
"""

from argparse import ArgumentParser
from ctypes import CDLL
from signal import SIGHUP, SIGINT, SIGQUIT, SIGTERM, signal
from sys import exit
from time import monotonic, sleep


def log(msg):
    """
    """
    print(msg)
    if separate_log:
        logging.info(msg)


def mlockall():
    """
    """
    MCL_CURRENT = 1
    MCL_FUTURE = 2
    MCL_ONFAULT = 4

    libc = CDLL(None, use_errno=True)
    result = libc.mlockall(MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT)

    if result != 0:
        result = libc.mlockall(MCL_CURRENT | MCL_FUTURE)
        if result != 0:
            log('WARNING: cannot lock process memory: [Errno {}]'.format(
                result))
        else:
            log('Process memory locked with MCL_CURRENT | MCL_FUTURE')
    else:
        log('Process memory locked with MCL_CURRENT | MCL_FUTURE | MCL_'
            'ONFAULT')


def check_stats():
    """
    """
    fd[None].seek(0)
    dev_lines = fd[None].read().decode().split('\n')

    dev_ok = False
    for dev_line in dev_lines:
        if DEV_SEPARATOR in dev_line:
            _, _, line_rpart = dev_line.rpartition(DEV_SEPARATOR)
            dev_ok = True

    if not dev_ok:
        log('device not found')
        exit(1)

    (r_ios, r_merges, r_sectors, r_ticks,
     w_ios, w_merges, w_sectors, w_ticks,
     in_flights, active
     ) = line_rpart.split()[:10]

    r_ios = int(r_ios)
    r_merges = int(r_merges)
    r_mib = int(r_sectors) * SECT_MULT
    r_wait = int(r_ticks) / T

    w_ios = int(w_ios)
    w_merges = int(w_merges)
    w_mib = int(w_sectors) * SECT_MULT
    w_wait = int(w_ticks) / T

    active = int(active) / T

    return (r_ios, r_merges, r_mib, r_wait,
            w_ios, w_merges, w_mib, w_wait,
            in_flights, active)


def signal_handler(signum, frame):
    """
    """
    def signal_handler_inner(signum, frame):
        pass

    for i in sig_list:
        signal(i, signal_handler_inner)

    log('--')

    (r_ios, r_merges, r_mib, r_wait,
     w_ios, w_merges, w_mib, w_wait,
     in_flights, active) = check_stats()

    fd[None].close()

    d_r_ios = r_ios - r_ios0
    d_r_merges = r_merges - r_merges0
    d_r_mib = r_mib - r_mib0
    d_r_wait = r_wait - r_wait0

    d_w_ios = w_ios - w_ios0
    d_w_merges = w_merges - w_merges0
    d_w_mib = w_mib - w_mib0
    d_w_wait = w_wait - w_wait0

    d_active = active - active0

    d_t = monotonic() - t0

    log('I/O statistics for {} in the last {}s:'.format(dev, round(d_t, 1)))
    log('  Read:')
    log('    {} MiB (avg {} MiB/s)'.format(
        round(d_r_mib, 1),
        round(d_r_mib / d_t, 1)
    ))
    log('    {} requests processed (avg {} rp/s)'.format(
        d_r_ios,
        round(d_r_ios / d_t, 1)
    ))
    log('    {} requests merged with in-queue I/O (avg {} rm/s)'.format(
        d_r_merges,
        round(d_r_merges / d_t, 1)
    ))
    log('    await {}s (avg {}%)'.format(
        round(d_r_wait, 1),
        round(d_r_wait / d_t * 100, 1)
    ))
    log('  Write:')
    log('    {} MiB (avg {} MiB/s)'.format(
        round(d_w_mib, 1),
        round(d_w_mib / d_t, 1)
    ))
    log('    {} requests processed (avg {} rp/s)'.format(
        d_w_ios,
        round(d_w_ios / d_t, 1)
    ))
    log('    {} requests merged with in-queue I/O (avg {} rm/s)'.format(
        d_w_merges,
        round(d_w_merges / d_t, 1)
    ))
    log('    await {}s (avg {}%)'.format(
        round(d_w_wait, 1),
        round(d_w_wait / d_t * 100, 1)
    ))
    log('  Utilization: {}s (avg {}%)'.format(
        round(d_active, 1),
        round(d_active / d_t * 100, 1)
    ))

    exit()


def monitor(r_ios_old, r_merges_old, r_mib_old, r_wait_old,
            w_ios_old, w_merges_old, w_mib_old, w_wait_old, active_old, t_old):
    """
    """
    sleep(interval)

    while True:

        (r_ios, r_merges, r_mib, r_wait,
         w_ios, w_merges, w_mib, w_wait,
         in_flights, active) = check_stats()

        t_new = monotonic()

        d_r_ios = r_ios - r_ios_old
        d_r_merges = r_merges - r_merges_old
        d_r_mib = r_mib - r_mib_old
        d_r_wait = r_wait - r_wait_old

        d_w_ios = w_ios - w_ios_old
        d_w_merges = w_merges - w_merges_old
        d_w_mib = w_mib - w_mib_old
        d_w_wait = w_wait - w_wait_old

        d_active = active - active_old

        d_t = t_new - t_old

        (r_ios_old, r_merges_old, r_mib_old, r_wait_old,
         w_ios_old, w_merges_old, w_mib_old, w_wait_old, active_old
         ) = (r_ios, r_merges, r_mib, r_wait,
              w_ios, w_merges, w_mib, w_wait, active)

        t_old = t_new

        if mode == '1':
            log('R {} MiB/s, await {}% | W {} MiB/s, await '
                '{}% | util {}%'.format(
                    round(d_r_mib / d_t, 1),
                    round(d_r_wait / d_t * 100),
                    round(d_w_mib / d_t, 1),
                    round(d_w_wait / d_t * 100),
                    round(d_active / d_t * 100, 1)
                ))

        elif mode == '2':
            log('R {} MiB/s, {} rp/s, {} rm/s, await {}% | W {} MiB/s, '
                '{} rp/s, {} rm/s, await {}% | in_fl {}r | util {}%'.format(
                    round(d_r_mib / d_t, 1),
                    round(d_r_ios / d_t),
                    round(d_r_merges / d_t),
                    round(d_r_wait / d_t * 100),
                    round(d_w_mib / d_t, 1),
                    round(d_w_ios / d_t),
                    round(d_w_merges / d_t),
                    round(d_w_wait / d_t * 100),
                    in_flights,
                    round(d_active / d_t * 100, 1)
                ))

        elif mode == '3':
            log('R {} MiB, {} rp, {} rm, await {}s | W {} MiB, {} rp, '
                '{} rm, await {}s | in_fl {}r | util {}s'.format(
                    round(d_r_mib, 1),
                    d_r_ios,
                    d_r_merges,
                    round(d_r_wait, 1),
                    round(d_w_mib, 1),
                    d_w_ios,
                    d_w_merges,
                    round(d_w_wait, 1),
                    in_flights,
                    round(d_active, 1),
                ))

        elif mode == '4':
            log('R {} MiB ({} MiB/s), {} rp ({} rp/s), {} rm ({} rm/s), '
                'await {}s ({}%) | W {} MiB ({} MiB/s), {} rp ({} rp/s), '
                '{} rm ({} rm/s), await {}s ({}%) | in_fl {}r | util {}s '
                '({}%)'.format(
                    round(d_r_mib, 1),
                    round(d_r_mib / d_t, 1),
                    d_r_ios,
                    round(d_r_ios / d_t),
                    d_r_merges,
                    round(d_r_merges / d_t),
                    round(d_r_wait, 1),
                    round(d_r_wait / d_t * 100),
                    round(d_w_mib, 1),
                    round(d_w_mib / d_t, 1),
                    d_w_ios,
                    round(d_w_ios / d_t),
                    d_w_merges,
                    round(d_w_merges / d_t),
                    round(d_w_wait, 1),
                    round(d_w_wait / d_t * 100),
                    in_flights,
                    round(d_active, 1),
                    round(d_active / d_t * 100, 1)
                ))

        if d_t > WARN_INTERVAL:
            print('WARNING: real interval was {}s'.format(round(d_t, 2)))

        sleep(interval)


DISKSTATS = '/proc/diskstats'


fd = dict()


try:
    fd[None] = open(DISKSTATS, 'rb', buffering=0)
    fd[None].read()
except Exception as e:
    print(e)
    exit(1)


parser = ArgumentParser()

parser.add_argument(
    '-d',
    '--dev',
    help='device name',
    default='',
    type=str
)

parser.add_argument(
    '-i',
    '--interval',
    help='interval in sec',
    default=2,
    type=float
)

parser.add_argument(
    '-m',
    '--mode',
    help='mode (1, 2, 3 or 4); default: 1',
    default='1',
    type=str
)

parser.add_argument(
    '-l',
    '--log',
    help='path to log file',
    default=None,
    type=str
)

args = parser.parse_args()
dev = args.dev
interval = args.interval
mode = args.mode
log_file = args.log

if not (mode == '1' or mode == '2' or mode == '3' or mode == '4'):
    print('error: invalid mode; valid values are 1, 2, 3 and 4')
    exit(1)

if log_file is None:
    separate_log = False
else:
    separate_log = True
    import logging

if log_file is not None:
    logstring = 'log file: {}, '.format(log_file)
else:
    logstring = 'log file is not set, '

if separate_log:
    try:
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format="%(asctime)s: %(message)s")
    except Exception as e:
        print(e)
        exit(1)

if dev == '':
    log('set correct device name with -d option')
    exit(1)

if dev.isdigit():
    log('invalid device name')
    exit(1)

if interval <= 0:
    log('error: argument -i/--interval: the value must be greater than 0')
    exit(1)


DEV_SEPARATOR = ' ' + dev + ' '

K = 1024

T = 1000

SECT_MULT = 512 / K / K

WARN_INTERVAL = interval * 1.01


sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

for i in sig_list:
    signal(i, signal_handler)


log('Starting diskio2log, block device: {}, interval: {}s, mode: {}'.format(
    dev, interval, mode))

if log_file is not None:
    log('Log file: {}'.format(log_file))


mlockall()


log('--')

(r_ios0, r_merges0, r_mib0, r_wait0,
 w_ios0, w_merges0, w_mib0, w_wait0, _, active0) = check_stats()

t0 = monotonic()

monitor(r_ios0, r_merges0, r_mib0, r_wait0,
        w_ios0, w_merges0, w_mib0, w_wait0, active0, t0)

